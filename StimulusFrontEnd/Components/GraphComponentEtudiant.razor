@using Microsoft.CodeAnalysis;
@using System.Text;
@using StimulusFrontEnd.Services;
@using static StimulusFrontEnd.Components.Connector
@using static StimulusFrontEnd.Components.NoeudsEtudiant
@inject MouseService mouseSrv;
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntim
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IUpdateService updateService
@inject MouseService mouseSrv;

<div class="row mt-2">
    <div class="col">
        <foreignObject x="5" y="5" width="1300" height="40">
            <div class="divGrapheEntete" style="width: 1300px; height: 40px;">
                <button class="spaceButton btn btn-primary" type="button" @onclick="AugmenterZoom">+</button>
                <button class="spaceButton btn btn-primary" type="button" @onclick="ReduireZoom">-</button>
                <button class="spaceButton btn btn-secondary" type="button" @onclick="ResetViewbox">Réinitialiser</button>
                <h5 style="color: white;"> zoom : @(Math.Round(zoomIncrement * 100))%</h5>
            </div>
        </foreignObject>
            <svg class="bg-transparent" width="100%" height="2000" xmlns="http://www.w3.org/2000/svg">
            <rect width="180" height="180" x="0" y="5" fill="#32587a"></rect>
            <foreignObject x="0" y="5" width="180" height="180">
                <div>
                    <p style="color:rgb(140,140,140); margin-left:10px;"> 1 gris : bloqué</p>
                    <p style="color:rgb(228, 231, 245); margin-left:10px;"> 2 blanc: disponible</p>
                    <p style="color:rgb(199,160,53); margin-left:10px;"> 3 jaune: consulté</p>
                    <p style="color:rgb(88,150,105); margin-left:10px;"> 4 vert : completé</p>
                </div>               
            </foreignObject>
                <svg class="bg-transparent" width="100%" height="1800" xmlns="http://www.w3.org/2000/svg" viewBox="@viewBoxX @viewBoxY @viewBoxWidth @viewBoxWidth" onmousewheel="Zoom" @onmousemove=@(e => mouseSrv.FireMove(this, e))
                @onmouseup=@(e => mouseSrv.FireUp(this, e))>
                <Draggable GetModeDeVue="GetModeFond" X="@((viewBoxWidth - 1800) / 2)" Y="@((viewBoxWidth - 1500) / 2)">
                    <rect x="-1000" y="-1000" width="4000" height="4000" style="fill:rgb(0,0,0,0);stroke-width:1;stroke:rgb(0,0,0)" />
                    @foreach (var noeud in Nodes)
                    {
                        <NoeudsEtudiant Node="@noeud" Nodes="@Nodes"></NoeudsEtudiant>
                    }
                </Draggable>
            </svg>
        </svg>
    </div>
</div>

@code {
    private HttpClient httpClient;
    private Client client;
    private string displayHover;
    public List<Noeud> Nodes { get; set; } = new();
    private List<Noeud> NodesTemp { get; set; } = new();
    private double viewBoxX = 0;
    private double viewBoxY = 0;
    private double viewBoxWidth = 2000;
    private double viewBoxHeight = 2000;
    private double zoomIncrement = 1;
    private string viewForm = "hidden";
    private string displayNouveauNoeud = "hidden";
    private Noeud nouveauNoeud;
    protected override void OnInitialized()
    {
        var builder = WebApplication.CreateBuilder();

        nouveauNoeud = new();
        var handler = new HttpClientHandler();
        handler.ClientCertificateOptions = ClientCertificateOption.Manual;
        handler.ServerCertificateCustomValidationCallback =
            (httpRequestMessage, cert, cetChain, policyErrors) =>
            {
                return true;
            };
        httpClient = new HttpClient(handler);
        httpClient.BaseAddress = new Uri(builder.Configuration["API:Use"]);
        client = new Client(httpClient);
        UpdateGraphe();
    }

    /// <summary>
    /// Recupere les noeuds du graph Numero X
    /// </summary>
    private async Task UpdateGraphe()
    {

        Nodes = new();
        if (sessionStorage != null)
        {
            int idGraphe;

            // Wait until 'idGraphe' is not zero (use a timeout or cancellation token for safety).
            while ((idGraphe = await sessionStorage.GetItemAsync<int>("idGraphe")) == 0)
            {
                // Add a delay to avoid continuous polling (e.g., 100ms).
                await Task.Delay(100);
            }

            Nodes = client.NoeudsAllAsync().Result.Where(c => c.GrapheId == idGraphe).ToList();
        }

        // Consider navigating using a relative URL
        NavigationManager.NavigateTo("/index");
    }
    private int GetModeFond() => 2; //Hardcode

    private void OnMouseHover() => displayHover = "show";
    private void OnMouseLeave() => displayHover = "hidden";

    private async void AugmenterZoom()
    {
        viewBoxX = viewBoxX + 5;
        viewBoxY = viewBoxY + 5;
        viewBoxWidth = viewBoxWidth - 20;
        viewBoxHeight = viewBoxHeight - 20;
        zoomIncrement = zoomIncrement + 0.01;
    }

    //Reset du zoom à 100%
    private void ResetViewbox()
    {
        viewBoxX = 0;
        viewBoxY = 0;
        viewBoxHeight = 2000;
        viewBoxWidth = 2000;
        zoomIncrement = 1;
    }

    //Réduit le zoom
    private async void ReduireZoom()
    {
        viewBoxX = viewBoxX - 5;
        viewBoxY = viewBoxY - 5;
        viewBoxWidth = viewBoxWidth + 20;
        viewBoxHeight = viewBoxHeight + 20;
        zoomIncrement = zoomIncrement - 0.01;
    }

    //Fonction zoom avec le scroll de la molette
    public void Zoom(WheelEventArgs mouse)
    {
        if (mouse.ShiftKey) // get le shift key
        {
            // Utilisation de mouse.DeltaY pour vérifier la direction du défilement
            if (mouse.DeltaY < 0)
            {
                // Faire zoom vers le haut
                viewBoxX = viewBoxX + 5;
                viewBoxY = viewBoxY + 5;
                viewBoxWidth = viewBoxWidth - 20;
                viewBoxHeight = viewBoxHeight - 20;
                zoomIncrement = zoomIncrement + 0.01;
            }
            else if (mouse.DeltaY > 0)
            {
                // Faire zoom vers le bas
                viewBoxX = viewBoxX - 5;
                viewBoxY = viewBoxY - 5;
                viewBoxWidth = viewBoxWidth + 20;
                viewBoxHeight = viewBoxHeight + 20;
                zoomIncrement = zoomIncrement - 0.01;
            }
        }
    }
}
