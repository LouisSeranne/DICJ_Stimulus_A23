@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IJSRuntime JSRuntim

@inject NavigationManager NavigationManager
@inject IUpdateService updateService
<AuthorizeView>
    <Authorized>
        @if (initDone)
        {         
            <header class="containerHeader">
                <div class="row">
                    <div class="col-sm-4 col-md-4 col-lg-4">
                        <img class="LogoCEPI" src="/RessourceVisuel/lologo.png" alt="Logo CEPI"/>
                    </div>                  
                    <div class ="col-sm-1 col-md-1 col-lg-1">
                        <select @onchange="ChangeGroupe" name="cours" class="ListeHeader" value=@listGroupe[0].Nom>
                            @foreach (var groupe in listGroupe)
                            {
                                <option value="@groupe.IdGroupe">@groupe.Nom</option>
                            }
                        </select>
                    </div>
                    <div class="col-sm-4 col-md-4 col-lg-4 divDroiteHeader">
                        <a href="/index"><img src="/image/Graph.png" alt="Logo Graph" class="logoHeader"/></a>
                        <a href="/logout"><img src="/image/Logout.png" alt="Logo Graph" class="logoHeader"/></a>
                        <img src="/image/Avatar.png" alt="Logo Avatar" class="logoHeader"/>
                    </div>
                </div>
            </header>
        }
    </Authorized>
    <NotAuthorized>
        <RedirectToLogin/>
    </NotAuthorized>
</AuthorizeView>

@code {
    Cour cours;

    private int idGroupe,idCours;
    private string numProf;
    private bool initDone;

    private List<GroupeHeader> listGroupe;
    private Professeur prof;

    private Client client;

    protected async override void OnInitialized()
    {

        initDone = false;

        var builder = WebApplication.CreateBuilder();

        //Handler : Permet de contourner les certifications sinon le projet crash
        var handler = new HttpClientHandler();
        handler.ClientCertificateOptions = ClientCertificateOption.Manual;
        handler.ServerCertificateCustomValidationCallback =
            (httpRequestMessage, cert, cetChain, policyErrors) =>
            {
                return true;
            };

        //Set une nouvelle Uri pour lien le Front-End a la Bd
        HttpClient httpClient = new HttpClient(handler) { BaseAddress = new System.Uri(builder.Configuration["API:Use"]) };

        client = new Client(httpClient);

        //Requete utilisée pour aller chercher les données du cours en fonction de l'id du graphe

    }

    protected async override void OnParametersSet()
    {
        idGroupe = await sessionStorage.GetItemAsync<int>("idGroupe");
        numProf = await sessionStorage.GetItemAsync<string>("idConnexion");

        //var idProf = client.ProfesseursAllAsync().Result.FirstOrDefault(p => p.NumEmploye == numProf).Id;
        var idProf = 1;//Temporaire, sera changer par var idProf =  await sessionStorage.GetItemAsync<string>("idConnexion")

        var profGroupe = client.GroupesAllAsync().Result.Where(g => g.ProfesseurId == idProf).ToList();// cherche tous les groupes des prof

        listGroupe = new List<GroupeHeader>();


        foreach (GroupeVM groupe in profGroupe)//mets les groupes dans une liste pour l'affichage
        {
            listGroupe.Add(new GroupeHeader(groupe));
        }
        
        initDone = true;

        await InvokeAsync(StateHasChanged);
     
    }

    private async void ChangeGroupe(ChangeEventArgs e) //Semi fonctionnelle, A CHANGER
    {
        JSRuntim.InvokeVoidAsync("console.log", "appele changeCour");

        await sessionStorage.SetItemAsync<int>("idGroupe", Int32.Parse((string)e.Value));

        int idGraphe = client.GraphesAllAsync().Result.Where(gra => gra.GroupeId == Int32.Parse((string)e.Value)).Select(gra => gra.Id).FirstOrDefault();

        await sessionStorage.SetItemAsync<int>("idGraphe", idGraphe);

        OnParametersSet();

        updateService.CallRequestRefresh();
        NavigationManager.NavigateTo("/prof");
    }
    private class GroupeHeader
    {
        public GroupeHeader(GroupeVM groupe)
        {
            Nom = groupe.Nom;
            IdGroupe = groupe.Id;
        }

        public string Nom { get; set; }
        public int IdGroupe { get; set; }

    }


}