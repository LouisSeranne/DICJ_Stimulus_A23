@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IJSRuntime JSRuntim

@inject NavigationManager NavigationManager
@inject IUpdateService updateService
<AuthorizeView>
    <Authorized>
        @if (initDone)
        {         
            <header class="containerHeader">
                <div class="row">
                    <div class="col-sm-4 col-md-4 col-lg-4">
                        <img class="LogoCEPI" src="/RessourceVisuel/lologo.png" alt="Logo CEPI"/>
                    </div>
                    <div class="col-sm-3 col-md-3 col-lg-3">
                        @*En lien avec le Groupe, quand on change de groupe, le code et lA description change aussi*@
                        <p class="pHeader">Code: @cours.CodeCours</p>
                        <p class="pHeader"> Description: @cours.Description</p>                        
                    </div>                  
                    <div class ="col-sm-2 col-md-2 col-lg-2" >
                        <select @onchange="ChangeCours" name="cours" class="ListeHeader" value=@listCourGroupeOrdered[0].IdGroupe >
                           @for (int i = 0; i < listCourGroupeOrdered.Count; i++)
                           {
                               <option value="@listCourGroupeOrdered[i].IdGroupe">@listCourGroupeOrdered[i].Nom</option>
                           }
                        </select>
                    </div>
                    <div class="col-sm-3 col-md-3 col-lg-3 divDroiteHeader">
                        <a href="/index"><img src="/image/Graph.png" alt="Logo Graph" class="logoHeader"/></a>
                        <a href="/logout"><img src="/image/Logout.png" alt="Logo Graph" class="logoHeader"/></a>
                        <img src="/image/Avatar.png" alt="Logo Avatar" class="logoHeader"/>
                    </div>
                </div>
            </header>
        }
    </Authorized>
    <NotAuthorized>
        <RedirectToLogin/>
    </NotAuthorized>
</AuthorizeView>

@code {
    Cour cours;

    private int idGroupe,idCours;
    private string daEtudiant;
    private bool initDone;

    private List<Cour> listCours;
    private EtudiantVM etu;
    private List<CoursGroupeHeader> listCourGroupe,listCourGroupeOrdered;

    private Client client;

    protected async override void OnInitialized()
    {
        var builder = WebApplication.CreateBuilder();

        // Initialize the 'initDone' flag
        initDone = false;

        // Create a HttpClient with custom handler to bypass certificate checks
        var handler = new HttpClientHandler
            {
                ClientCertificateOptions = ClientCertificateOption.Manual,
                ServerCertificateCustomValidationCallback = (httpRequestMessage, cert, cetChain, policyErrors) => true
            };

        // Set the base URI for the HttpClient
        var httpClient = new HttpClient(handler)
            {
                BaseAddress = new System.Uri(builder.Configuration["API:Use"])
            };

        // Initialize the 'client' with the HttpClient
        client = new Client(httpClient);
    }


    protected async override Task OnParametersSetAsync()
    {
        idCours = await sessionStorage.GetItemAsync<int>("idCours");
        idGroupe = await sessionStorage.GetItemAsync<int>("idGroupe");
        daEtudiant = await sessionStorage.GetItemAsync<string>("idConnexion");

        cours = await client.CoursGETAsync(idCours);
        etu = await client.EtudiantsGETAsync(daEtudiant);

        listCours = client.CoursAllAsync().Result
            .Where(c => etu.Groupes.Any(gr => gr.CoursId == c.Id))
            .ToList();

        listCourGroupe = listCours
            .Select(c => new CoursGroupeHeader(etu.Groupes.FirstOrDefault(gr => gr.CoursId == c.Id), c))
            .ToList();

        listCourGroupeOrdered = new List<CoursGroupeHeader>
        {
            listCourGroupe.FirstOrDefault(c => c.IdGroupe == idGroupe)
        };
        listCourGroupeOrdered.AddRange(listCourGroupe.Where(c => c.IdGroupe != idGroupe));

        initDone = true;

        await InvokeAsync(StateHasChanged);
    }


    private async void ChangeCours(ChangeEventArgs e)
    {
        JSRuntim.InvokeVoidAsync("console.log", "appele changeCour");

        int selectedGroupId = Int32.Parse((string)e.Value);

        await sessionStorage.SetItemAsync("idGroupe", selectedGroupId);

        // Use await for asynchronous operations
        var groupeResponse = await client.GroupesGETAsync(selectedGroupId);
        int? idCours = groupeResponse.CoursId;

        await sessionStorage.SetItemAsync("idCours", idCours);

        int idGraphe = client.GraphesAllAsync().Result
            .Where(gra => gra.GroupeId == selectedGroupId)
            .Select(gra => gra.Id)
            .FirstOrDefault();

        await sessionStorage.SetItemAsync("idGraphe", idGraphe);

        // If you want to wait for OnParametersSet to complete, use await
        OnParametersSet();

        updateService.CallRequestRefresh();

        // Consider navigating using a relative URL
        NavigationManager.NavigateTo("/inde");
        NavigationManager.NavigateTo("/index");
    }
   
    private class CoursGroupeHeader
    {
        public CoursGroupeHeader(GroupeVM groupe, Cour cour)
        {
            Nom = cour.CodeCours + " - " + groupe.Nom;
            IdGroupe = groupe.Id;
        }

        public string Nom { get; set; }
        public int IdGroupe { get; set; }

    }
}
