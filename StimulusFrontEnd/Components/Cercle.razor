@using StimulusFrontEnd.Services;
@using static StimulusFrontEnd.Components.Connector;
@foreach(var parent in Node.NoeudParents)
{
    <Connector X1=parent.PosX Y1=parent.PosY X2=Node.PosX Y2=Node.PosY />
}
@for (int i = 0; i < Nodes.Count; i++)
{
    @if(Node.LiaisonPrincipal == Nodes[i].LiaisonPrincipal)
    {
        <Connector X1=Node.PosX Y1=Node.PosY X2=Nodes[i].PosX Y2=Nodes[i].PosY />
    }
}

    <Draggable @bind-X=Node.PosX @bind-Y=Node.PosY>
        <circle r="@Node.Rayon" class="cercle" />
        <NavLink href="/">
            <text text-anchor="middle" alignment-baseline="central">@Node.Code</text>
         </NavLink> 
                                                  
    </Draggable>

<style>
    a{
        text-decoration: none;
    }
    text {
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
        fill: white;
    }

    .cercle-title {
        fill: #fff;
        pointer-events: none !important;
    }

    .cercle {
        z-index: 1;
        fill: blue;
        stroke: #fff;
        stroke-width: 1;
    }
</style>
@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter] public StimulusFrontEnd.Services.Base.Noeud Node { get; set; }
    [Parameter] public List<StimulusFrontEnd.Services.Base.Noeud> Nodes { get; set; }

}