@using StimulusFrontEnd.Services;
@using static StimulusFrontEnd.Components.Connector;
@for (int i = 0; i < Nodes.Count; i++)
{
    @if (Node.Id == Nodes[i].LiaisonPrincipal && Nodes[i].LiaisonPrincipal != null)
    {
        <Connector X1=Node.PosX Y1=Node.PosY X2=Nodes[i].PosX Y2=Nodes[i].PosY />
    }
}

    <Draggable @bind-X=Node.PosX @bind-Y=Node.PosY>
    <circle visibility="@displayHover" r="@(Node.Rayon + 3)" class="cercle" style="fill: rgba(255,255,255,5); opacity:0.5" />

    <circle @onmouseover=@(e => OnMouseHover()) @onmouseout=@(e => OnMouseLeave()) r="@Node.Rayon" class="cercle" />



    <rect x="@((Node.Rayon*2- Node.Rayon/2 -10))" y="@(-180 + Node.Rayon/2)" visibility="@displayHover" width="200" height="150" style="fill: rgba(255,255,255,255)" />
    <foreignObject x="@((Node.Rayon*2- Node.Rayon/2 -10))" y="@(-180 + Node.Rayon/2)" visibility="@displayHover" width="200" height="150" style="padding:5px">
        <span> Nom :  @Node.Code / ID : @Node.Id</span><br />
        <span>Parent : @TestParent()</span><br /> @*Pour ne pas avoir de champ vide*@
        <span> Desc : @Node.Description</span>
    </foreignObject>


    <NavLink href="@link">
            <text text-anchor="middle" alignment-baseline="central">@Node.Code</text>
         </NavLink> 
                                                  
    </Draggable>

<style>
    a{
        text-decoration: none;
    }
    text {
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
        fill: white;
    }

    .cercle-title {
        fill: #fff;
        pointer-events: none !important;
    }

    .cercle {
        z-index: 1;
        fill: blue;
        stroke: #fff;
        stroke-width: 1;
    }
</style>
@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public StimulusFrontEnd.Services.Base.Noeud Node { get; set; }
    [Parameter] public List<StimulusFrontEnd.Services.Base.Noeud> Nodes { get; set; }
    private string link;
    private string displayHover = "hidden";
    private string TestParent()
    {
        return (Node.LiaisonPrincipal != null) ? Node.LiaisonPrincipal.ToString() : "Aucun";
    }
    protected override void OnInitialized()
    {
        link = "index/" + Node.Code + Node.GrapheId + Node.Id;
    }
    private void OnMouseHover()
    {
        displayHover = "visible";
    }
    private void OnMouseLeave()
    {
        displayHover = "hidden";
    }

}