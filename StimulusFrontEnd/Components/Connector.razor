<path d="M @X1 @Y1 C @c1x @c1y, @c2x @c2y, @X2 @Y2" stroke="rgb(108, 117, 125)" stroke-width="1.5" fill="transparent" style="pointer-events:none !important; position: absolute; z-index: -1;" />
    @if (GetModeDeVue() == 2)
{
    <circle @onclick="CouperLeLien" title="Break The Link" class="cutting" cx="@midX.ToString(System.Globalization.CultureInfo.InvariantCulture)" cy="@midY.ToString(System.Globalization.CultureInfo.InvariantCulture)" r="8" fill="red" />
}

@code {
    [Parameter] public Noeud Noeud { get; set; }
    [Parameter] public Action<Noeud> SaveChangeNoeud { get; set; }
    [Parameter] public Func<int> GetModeDeVue { get; set; }
    [Parameter] public Action ReRender { get; set; }

    [Parameter] public Direction Dir1 { get; set; } = Direction.Right;
    [Parameter] public double? X1 { get; set; }
    [Parameter] public double? Y1 { get; set; }

    [Parameter] public Direction Dir2 { get; set; } = Direction.Left;
    [Parameter] public double? X2 { get; set; }
    [Parameter] public double? Y2 { get; set; }

    double? c1x;
    double? c1y;

    double? c2x;
    double? c2y;

    decimal midX;
    decimal midY;

    private void CouperLeLien()
    {
        //Methode du bled, impossible de null le champs en put. fonctionne sans soucis pour le nouveau graph, boucle infinie sur l'ancien
        Noeud.LiaisonPrincipal = Noeud.Id;
        SaveChangeNoeud(Noeud);
        ReRender();
    }
    protected override void OnParametersSet()
    {
        c1x = cx(Dir1, X1);
        c1y = cy(Dir1, Y1);

        c2x = cx(Dir2, X2);
        c2y = cy(Dir2, Y2);

        // Calcul des coordonnées du point médian
        midX = Convert.ToDecimal((X1 ?? 0) + ((X2 ?? 0) - (X1 ?? 0)) / 2);
        midY = Convert.ToDecimal((Y1 ?? 0) + ((Y2 ?? 0) - (Y1 ?? 0)) / 2);

        base.OnParametersSet();
    }
    const int coef = 0;

    static double cx(Direction dir, double? x)
        => (dir == Direction.Right || dir == Direction.Left)
            ? dir == Direction.Right ? x.Value + coef : x.Value - coef
            : x.Value;

    static double cy(Direction dir, double? y)
        => (dir == Direction.Right || dir == Direction.Left)
            ? y.Value
            : dir == Direction.Bottom ? y.Value + coef : y.Value - coef;

    public enum Direction
    {
        Top,
        Right,
        Bottom,
        Left
    }
}
