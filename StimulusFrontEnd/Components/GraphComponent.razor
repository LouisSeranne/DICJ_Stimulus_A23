@using StimulusFrontEnd.Services;
@using static StimulusFrontEnd.Components.Connector
@using static StimulusFrontEnd.Components.Cercle
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntim
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IUpdateService updateService
@inject MouseService mouseSrv;


<div class="row mt-2">
    <div class="col">
        <svg class="bg-light" width="100%" height="500" xmlns="http://www.w3.org/2000/svg"
        @onmousemove=@(e => mouseSrv.FireMove(this, e))
        @onmouseup=@(e => mouseSrv.FireUp(this, e))
        @onmouseout=@(e => mouseSrv.FireLeave(this, e))>
            @foreach (var item in Nodes)
            {
                <Cercle Node="@item" Nodes="@Nodes"></Cercle>
            }
        </svg>
    </div>
</div>

@code {
    private HttpClient httpClient;
    private Client client;

    public List<Noeud> Nodes { get; set; } = new();
    protected override async void OnInitialized()
    {
        var handler = new HttpClientHandler();
        handler.ClientCertificateOptions = ClientCertificateOption.Manual;
        handler.ServerCertificateCustomValidationCallback =
            (httpRequestMessage, cert, cetChain, policyErrors) =>
            {
                return true;
            };
        httpClient = new HttpClient(handler);
        httpClient.BaseAddress = new Uri("https://localhost:7266/");
        client = new Client(httpClient);


        Nodes = client.NoeudsAllAsync().Result.ToList();
        foreach (var item in Nodes)
        {
            var t = item.NoeudParents;
        }
    }

}
