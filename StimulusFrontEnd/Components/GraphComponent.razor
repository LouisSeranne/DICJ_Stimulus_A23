@using StimulusFrontEnd.Services;
@using static StimulusFrontEnd.Components.Connector
@using static StimulusFrontEnd.Components.Cercle
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntim
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IUpdateService updateService
@inject MouseService mouseSrv;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage


<div class="row mt-2">
    <div class="col">
        <svg class="bg-transparent" width="100%" height="500" xmlns="http://www.w3.org/2000/svg"
        @onmousemove=@(e => mouseSrv.FireMove(this, e))
        @onmouseup=@(e => mouseSrv.FireUp(this, e))
        @onmousewheel=@(e => mouseSrv.FireLeave(this, e, SaveChange))>
            @foreach (var item in Nodes)
            {
                <Cercle Node="@item" Nodes="@Nodes"></Cercle>
            }
        </svg>
    </div>
</div>

@code {
    private HttpClient httpClient;
    private Client client;

    public List<Noeud> Nodes { get; set; } = new();
    private List<Noeud> NodesTemp { get; set; } = new();

    protected override void OnInitialized()
    {
        var handler = new HttpClientHandler();
        handler.ClientCertificateOptions = ClientCertificateOption.Manual;
        handler.ServerCertificateCustomValidationCallback =
            (httpRequestMessage, cert, cetChain, policyErrors) =>
            {
                return true;
            };
        httpClient = new HttpClient(handler);
        httpClient.BaseAddress = new Uri("https://localhost:7266/");
        client = new Client(httpClient);
        UpdateGrahe();
    }
    private async void UpdateGrahe()
    {
        if(sessionStorage != null)
        {
            await sessionStorage.ContainKeyAsync("idGraphe");

            int idGraphe = await sessionStorage.GetItemAsync<int>("idGraphe");
            NodesTemp = client.NoeudsAllAsync().Result.ToList();
            foreach (var item in NodesTemp)
            {
                if (item.GrapheId == idGraphe)
                    Nodes.Add(item);
            }
        }
    }
    private void SaveChange()
    {
        foreach (var item in Nodes)
        {
            client.NoeudsPUTAsync(item.Id, item);
        }
    }

}
