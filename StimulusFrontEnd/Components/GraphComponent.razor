@using StimulusFrontEnd.Services;
@using static StimulusFrontEnd.Components.Connector
@using static StimulusFrontEnd.Components.Cercle
@inject MouseService mouseSrv;
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntim
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IUpdateService updateService
@inject MouseService mouseSrv;

<div class="row mt-2">
    <div class="col">
        <svg class="bg-transparent" width="100%" height="1200" xmlns="http://www.w3.org/2000/svg" >

            <rect width="180" height="180" x="5" y="5" fill="#32587a"></rect>

            <foreignObject x="5" y="5" width="180" height="400">
                <div>
                    <p style="color:rgb(140,140,140); margin-left:10px;">  gris : bloqué</p>
                    <p style="color:rgb(228, 231, 245); margin-left:10px;">  blanc: disponible</p>
                    <p style="color:rgb(199,160,53); margin-left:10px;">  jaune: consulté</p>
                    <p style="color:rgb(88,150,105); margin-left:10px;">  vert : completé</p>
                </div>
                
            </foreignObject>
            <svg class="bg-transparent" width="100%" height="1800" xmlns="http://www.w3.org/2000/svg" 
            @onmousemove=@(e => mouseSrv.FireMove(this, e))
            @onmouseup=@(e => mouseSrv.FireUp(this, e,SaveChange))>
                <Draggable X="0" Y="0">
                    <rect x="-1000" y="-1000" width="4000" height="4000" style="fill:rgb(0,0,0,0);stroke-width:1;stroke:rgb(0,0,0)" />
                    @foreach (var noeud in Nodes)
                    {
                        <Cercle Node="@noeud" Nodes="@Nodes" AjoutNouveauNoeud="AjoutNouveauNoeud" SupprNoeud="SupprimerNoeud"></Cercle>
                    }
                </Draggable>

            </svg>
        </svg>



    </div>
</div>

@code {
    private HttpClient httpClient;
    private Client client;
    private string displayHover;
    public List<Noeud> Nodes { get; set; } = new();
    private List<Noeud> NodesTemp { get; set; } = new();
    private double xAllDrag { get; set; } = 0;
    private double yAllDrag { get; set; } = 0;
    private string displayNouveauNoeud = "hidden";
    private Noeud nouveauNoeud;
    protected override void OnInitialized()
    {
        nouveauNoeud = new();
        var handler = new HttpClientHandler();
        handler.ClientCertificateOptions = ClientCertificateOption.Manual;
        handler.ServerCertificateCustomValidationCallback =
            (httpRequestMessage, cert, cetChain, policyErrors) =>
            {
                return true;
            };
        httpClient = new HttpClient(handler);
        httpClient.BaseAddress = new Uri("http://localhost:5000");
        client = new Client(httpClient);
        UpdateGraphe();

    }
    /// <summary>
    /// Recupere les noeuds du graph Numero X
    /// </summary>
    private async void UpdateGraphe()
    {
        try
        {
            Nodes = new();
            if (sessionStorage != null )
            {
                if (await sessionStorage.ContainKeyAsync("idGraphe") && await sessionStorage.GetItemAsync<int>("idGraphe") != 0)
                {
                    int idGraphe = await sessionStorage.GetItemAsync<int>("idGraphe");
                    NodesTemp = client.NoeudsAllAsync().Result.ToList();
                    foreach (var item in NodesTemp)
                    {
                        if (item.GrapheId == idGraphe)
                            Nodes.Add(item);
                    }
                }
                else
                    UpdateGraphe();

            }
            NavigationManager.NavigateTo("/index");    
        }
        catch
        {
            //Erreur dans le preload de la session, erreur a fix au niveau de idGraphe et autre variable surement patch avec une main page par default
        }

    }
    private void ResetPositionGraph()
    {
        yAllDrag = 0;
        xAllDrag = 0;
    }
    /// <summary>
    /// Permet l'ajout de noveau noeud
    /// </summary>
    private void AjoutNouveauNoeud(Noeud nouveauNoeud)
    {
        SaveNouveauNoeud(nouveauNoeud); 
        UpdateGraphe();

    }
    /// <summary>
    /// Supprime le noeud avec l'id selectionner
    /// </summary>
    /// <param name="id"></param>
    private void SupprimerNoeud(int id)
    {
        client.NoeudsDELETEAsync(id);
        UpdateGraphe();

    }
    private void OnMouseHover()
    {
        displayHover = "show";
    }
    private void OnMouseLeave()
    {
        displayHover = "hidden";
    }
    /// <summary>
    /// Sauvegarde les mises a jour du graph
    /// </summary>
    public void SaveChange()
    {
        foreach (var item in Nodes)
        {
            client.NoeudsPUTAsync(item.Id, item);
        }
        NavigationManager.NavigateTo("/index");
    }
    public async void SaveNouveauNoeud(Noeud noeud)
    {
        if(noeud !=null)
            await client.NoeudsPOSTAsync(noeud);
    }
}
